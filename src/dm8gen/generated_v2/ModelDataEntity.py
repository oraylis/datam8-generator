"""
DataM8
Copyright (C) 2024-2025 ORAYLIS GmbH

This file is part of DataM8.

DataM8 is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

DataM8 is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program. If not, see <https://www.gnu.org/licenses/>.
"""

# generated by datamodel-codegen:
#   filename:  ModelDataEntity.json

from __future__ import annotations

from enum import Enum
from typing import List, Optional, Union

from pydantic import BaseModel, ConfigDict, RootModel


class Type(Enum):
    RAW = 'raw'
    STAGE = 'stage'
    CORE = 'core'
    CURATED = 'curated'


class Parameter(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)
    name: str
    value: str

    def to_dict(self) -> dict:
        return self.model_dump(by_alias=True, exclude_unset=True, mode='json')

    @staticmethod
    def from_dict(obj) -> 'Parameter':
        return Parameter.model_validate(obj, from_attributes=False)


class History(Enum):
    SCD0 = 'SCD0'
    SCD1 = 'SCD1'
    SCD2 = 'SCD2'
    BK = 'BK'
    SK = 'SK'
    SCD1_TIMESTAMP = 'SCD1_TIMESTAMP'


class Attribute(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)
    ordinalNumber: int
    name: str
    displayName: Optional[str] = None
    purpose: Optional[str] = None
    explanation: Optional[str] = None
    dataType: str
    charLength: Optional[int] = None
    charSet: Optional[str] = None
    precision: Optional[int] = None
    scale: Optional[int] = None
    nullable: Optional[bool] = None
    dateModified: Optional[str] = None
    dateDeleted: Optional[str] = None
    parameter: Optional[List[Parameter]] = None
    tags: Optional[List[str]] = None
    refactorNames: Optional[List[str]] = None
    history: Optional[History] = History.SCD1

    def to_dict(self) -> dict:
        return self.model_dump(by_alias=True, exclude_unset=True, mode='json')

    @staticmethod
    def from_dict(obj) -> 'Attribute':
        return Attribute.model_validate(obj, from_attributes=False)


class RelationshipField(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)
    dm8lAttr: str
    dm8lKeyAttr: str

    def to_dict(self) -> dict:
        return self.model_dump(by_alias=True, exclude_unset=True, mode='json')

    @staticmethod
    def from_dict(obj) -> 'RelationshipField':
        return RelationshipField.model_validate(obj, from_attributes=False)


class Relationship(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)
    dm8lKey: str
    role: str
    fields: Optional[List[RelationshipField]] = None

    def to_dict(self) -> dict:
        return self.model_dump(by_alias=True, exclude_unset=True, mode='json')

    @staticmethod
    def from_dict(obj) -> 'Relationship':
        return Relationship.model_validate(obj, from_attributes=False)


class DataEntity(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)
    dataModule: str
    dataProduct: str
    name: str
    extensionOf: Optional[str] = None
    displayName: str
    purpose: Optional[str] = None
    explanation: Optional[str] = None
    parameters: Optional[List[Parameter]] = None
    tags: Optional[List[str]] = None
    attribute: Optional[List[Attribute]] = None
    relationship: Optional[List[Relationship]] = None
    refactorNames: Optional[List[str]] = None

    def to_dict(self) -> dict:
        return self.model_dump(by_alias=True, exclude_unset=True, mode='json')

    @staticmethod
    def from_dict(obj) -> 'DataEntity':
        return DataEntity.model_validate(obj, from_attributes=False)


class Mode(Enum):
    SCHEDULE = 'schedule'
    MODULE = 'module'
    EVENT = 'event'
    CHILDREN = 'children'


class FunctionsTrigger(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)
    mode: Optional[Mode] = None

    def to_dict(self) -> dict:
        return self.model_dump(by_alias=True, exclude_unset=True, mode='json')

    @staticmethod
    def from_dict(obj) -> 'FunctionsTrigger':
        return FunctionsTrigger.model_validate(obj, from_attributes=False)


class Mode1(Enum):
    HISTORY = 'history'
    OVERWRITE = 'overwrite'
    SNAPSHOT = 'snapshot'


class FunctionsStore(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)
    mode: Optional[Mode1] = None

    def to_dict(self) -> dict:
        return self.model_dump(by_alias=True, exclude_unset=True, mode='json')

    @staticmethod
    def from_dict(obj) -> 'FunctionsStore':
        return FunctionsStore.model_validate(obj, from_attributes=False)


class Type1(Enum):
    SOURCE = 'source'


class Type2(Enum):
    MODEL = 'model'


class FunctionsMapping(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)
    targetName: str
    sourceName: str

    def to_dict(self) -> dict:
        return self.model_dump(by_alias=True, exclude_unset=True, mode='json')

    @staticmethod
    def from_dict(obj) -> 'FunctionsMapping':
        return FunctionsMapping.model_validate(obj, from_attributes=False)


class Kind(Enum):
    CUSTOM = 'custom'


class FunctionsTransformationCustom(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)
    stepNo: int
    kind: Kind
    name: str

    def to_dict(self) -> dict:
        return self.model_dump(by_alias=True, exclude_unset=True, mode='json')

    @staticmethod
    def from_dict(obj) -> 'FunctionsTransformationCustom':
        return FunctionsTransformationCustom.model_validate(obj, from_attributes=False)


class Kind1(Enum):
    BUILDIN = 'buildin'


class FunctionsTransformationBuildIn(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)
    stepNo: int
    kind: Kind1
    name: str

    def to_dict(self) -> dict:
        return self.model_dump(by_alias=True, exclude_unset=True, mode='json')

    @staticmethod
    def from_dict(obj) -> 'FunctionsTransformationBuildIn':
        return FunctionsTransformationBuildIn.model_validate(obj, from_attributes=False)


class FunctionsSourceSystem(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)
    type: Type1
    dataSource: str
    sourceLocation: str
    mapping: List[FunctionsMapping]

    def to_dict(self) -> dict:
        return self.model_dump(by_alias=True, exclude_unset=True, mode='json')

    @staticmethod
    def from_dict(obj) -> 'FunctionsSourceSystem':
        return FunctionsSourceSystem.model_validate(obj, from_attributes=False)


class FunctionsSourceModel(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)
    type: Type2
    dm8l: str
    mapping: List[FunctionsMapping]

    def to_dict(self) -> dict:
        return self.model_dump(by_alias=True, exclude_unset=True, mode='json')

    @staticmethod
    def from_dict(obj) -> 'FunctionsSourceModel':
        return FunctionsSourceModel.model_validate(obj, from_attributes=False)


class Functions(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)
    trigger: FunctionsTrigger
    store: FunctionsStore
    sources: List[Union[FunctionsSourceSystem, FunctionsSourceModel]]
    transformations: Optional[
        List[Union[FunctionsTransformationCustom, FunctionsTransformationBuildIn]]
    ] = None

    def to_dict(self) -> dict:
        return self.model_dump(by_alias=True, exclude_unset=True, mode='json')

    @staticmethod
    def from_dict(obj) -> 'Functions':
        return Functions.model_validate(obj, from_attributes=False)


class Model(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)
    type: Type
    entity: DataEntity
    functions: Functions

    def to_dict(self) -> dict:
        return self.model_dump(by_alias=True, exclude_unset=True, mode='json')

    @staticmethod
    def from_dict(obj) -> 'Model':
        return Model.model_validate(obj, from_attributes=False)
