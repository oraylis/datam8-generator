"""
DataM8
Copyright (C) 2024-2025 ORAYLIS GmbH

This file is part of DataM8.

DataM8 is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

DataM8 is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program. If not, see <https://www.gnu.org/licenses/>.
"""

# generated by datamodel-codegen:
#   filename:  CuratedModelEntry.json

from __future__ import annotations

from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, ConfigDict, Field

from . import CoreModelEntry


class Type(Enum):
    CURATED = 'curated'


class ComputationSourceEntity(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)
    dm8l: str

    def to_dict(self) -> dict:
        return self.model_dump(by_alias=True, exclude_unset=True, mode='json')

    @staticmethod
    def from_dict(obj) -> 'ComputationSourceEntity':
        return ComputationSourceEntity.model_validate(obj, from_attributes=False)


class MergeType(Enum):
    """
    Merge type
      - self=responsibility of function;
      - partition=replace changed partition completely;
      - merge=merge on primary key;
      - replace=full replacement
    """

    SELF = 'self'
    PARTITION = 'partition'
    MERGE = 'merge'
    REPLACE = 'replace'


class Frequency(Enum):
    """
    Frequency of execution (not a schedule).
     The function is only executed once day/week/mounth/year
    """

    NO_RESTRICTION = 'no_restriction'
    DAILY = 'daily'
    WEEKLY = 'weekly'
    MONTHLY = 'monthly'
    YEARLY = 'yearly'


class CuratedFunction(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)
    name: str = Field(..., description='name of function')
    merge_type: MergeType = Field(
        ...,
        description='Merge type\n  - self=responsibility of function;\n  - partition=replace changed partition completely;\n  - merge=merge on primary key;\n  - replace=full replacement',
    )
    frequency: Frequency = Field(
        ...,
        description='Frequency of execution (not a schedule).\n The function is only executed once day/week/mounth/year',
    )
    frequency_reference: Optional[str] = Field(
        None,
        description='Depending on the value of the frequency for\n  -no_restriction->nothing;\n  - daily=time; weekly=weekday(+time);\n  - monthly=day of month(+time);\n  - yearly=day+month(+time)',
    )
    source: Optional[List[ComputationSourceEntity]] = None

    def to_dict(self) -> dict:
        return self.model_dump(by_alias=True, exclude_unset=True, mode='json')

    @staticmethod
    def from_dict(obj) -> 'CuratedFunction':
        return CuratedFunction.model_validate(obj, from_attributes=False)


class Model(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)
    field_schema: Optional[str] = Field(None, alias='$schema')
    type: Type
    entity: Optional[CoreModelEntry.CoreEntity] = None
    function: Optional[List[CuratedFunction]] = None

    def to_dict(self) -> dict:
        return self.model_dump(by_alias=True, exclude_unset=True, mode='json')

    @staticmethod
    def from_dict(obj) -> 'Model':
        return Model.model_validate(obj, from_attributes=False)
