"""
DataM8
Copyright (C) 2024-2025 ORAYLIS GmbH

This file is part of DataM8.

DataM8 is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

DataM8 is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program. If not, see <https://www.gnu.org/licenses/>.
"""

# generated by datamodel-codegen:
#   filename:  CoreModelEntry.json

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, ConfigDict, Field


class Type(Enum):
    CORE = 'core'


class Parameter(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)
    name: str
    value: str
    custom: Optional[Dict[str, Any]] = None

    def to_dict(self) -> dict:
        return self.model_dump(by_alias=True, exclude_unset=True, mode='json')

    @staticmethod
    def from_dict(obj) -> 'Parameter':
        return Parameter.model_validate(obj, from_attributes=False)


class History(Enum):
    SCD0 = 'SCD0'
    SCD1 = 'SCD1'
    SCD2 = 'SCD2'
    BK = 'BK'
    SK = 'SK'
    SCD1_TIMESTAMP = 'SCD1_TIMESTAMP'


class Attribute(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)
    name: str
    displayName: Optional[str] = None
    purpose: Optional[str] = None
    explanation: Optional[str] = None
    attributeType: Optional[str] = None
    dataType: Optional[str] = None
    businessKeyNo: Optional[int] = None
    alternateKeyGroup: Optional[str] = None
    alternateKeyNo: Optional[int] = None
    charLength: Optional[int] = None
    charSet: Optional[str] = None
    precision: Optional[int] = None
    scale: Optional[int] = None
    nullable: Optional[bool] = None
    unitAttribute: Optional[str] = None
    parameter: Optional[List[Parameter]] = None
    tags: Optional[List[str]] = None
    refactorNames: Optional[List[str]] = None
    history: Optional[History] = History.SCD1

    def to_dict(self) -> dict:
        return self.model_dump(by_alias=True, exclude_unset=True, mode='json')

    @staticmethod
    def from_dict(obj) -> 'Attribute':
        return Attribute.model_validate(obj, from_attributes=False)


class RelationshipField(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)
    dm8lAttr: str
    dm8lKeyAttr: str

    def to_dict(self) -> dict:
        return self.model_dump(by_alias=True, exclude_unset=True, mode='json')

    @staticmethod
    def from_dict(obj) -> 'RelationshipField':
        return RelationshipField.model_validate(obj, from_attributes=False)


class Relationship(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)
    dm8lKey: str
    role: str
    fields: Optional[List[RelationshipField]] = None

    def to_dict(self) -> dict:
        return self.model_dump(by_alias=True, exclude_unset=True, mode='json')

    @staticmethod
    def from_dict(obj) -> 'Relationship':
        return Relationship.model_validate(obj, from_attributes=False)


class CoreEntity(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)
    dataModule: str
    dataProduct: str
    name: str
    extensionOf: Optional[str] = None
    displayName: str
    purpose: Optional[str] = None
    explanation: Optional[str] = None
    parameters: Optional[List[Parameter]] = None
    tags: Optional[List[str]] = None
    attribute: Optional[List[Attribute]] = None
    relationship: Optional[List[Relationship]] = None
    refactorNames: Optional[List[str]] = None

    def to_dict(self) -> dict:
        return self.model_dump(by_alias=True, exclude_unset=True, mode='json')

    @staticmethod
    def from_dict(obj) -> 'CoreEntity':
        return CoreEntity.model_validate(obj, from_attributes=False)


class MappingItem(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)
    name: Optional[str] = None
    sourceComputation: Optional[str] = None
    sourceName: str

    def to_dict(self) -> dict:
        return self.model_dump(by_alias=True, exclude_unset=True, mode='json')

    @staticmethod
    def from_dict(obj) -> 'MappingItem':
        return MappingItem.model_validate(obj, from_attributes=False)


class SourceEntity(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)
    dm8l: str
    filter: Optional[str] = None
    mapping: Optional[List[MappingItem]] = None

    def to_dict(self) -> dict:
        return self.model_dump(by_alias=True, exclude_unset=True, mode='json')

    @staticmethod
    def from_dict(obj) -> 'SourceEntity':
        return SourceEntity.model_validate(obj, from_attributes=False)


class CoreFunction(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)
    fileType: Optional[str] = None
    storageType: Optional[str] = None
    processingMethod: Optional[str] = None
    deltaExpression: Optional[str] = None
    filterStatement: Optional[str] = None
    source: Optional[List[SourceEntity]] = None

    def to_dict(self) -> dict:
        return self.model_dump(by_alias=True, exclude_unset=True, mode='json')

    @staticmethod
    def from_dict(obj) -> 'CoreFunction':
        return CoreFunction.model_validate(obj, from_attributes=False)


class Model(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)
    field_schema: Optional[str] = Field(None, alias='$schema')
    type: Type
    entity: Optional[CoreEntity] = None
    function: Optional[CoreFunction] = None

    def to_dict(self) -> dict:
        return self.model_dump(by_alias=True, exclude_unset=True, mode='json')

    @staticmethod
    def from_dict(obj) -> 'Model':
        return Model.model_validate(obj, from_attributes=False)
