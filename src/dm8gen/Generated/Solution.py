# generated by datamodel-codegen:
#   filename:  Solution.json

from __future__ import annotations

from pydantic import BaseModel, ConfigDict


class AreaTypes(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)
    Raw: str
    Stage: str
    Core: str
    Curated: str
    Diagram: str

    def to_dict(self) -> dict:
        return self.model_dump(by_alias=True, exclude_unset=True, mode='json')

    @staticmethod
    def from_dict(obj) -> 'AreaTypes':
        return AreaTypes.model_validate(obj, from_attributes=False)


class Model(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)
    basePath: str
    rawPath: str
    stagingPath: str
    corePath: str
    curatedPath: str
    generatePath: str
    diagramPath: str
    outputPath: str
    AreaTypes: AreaTypes

    def to_dict(self) -> dict:
        return self.model_dump(by_alias=True, exclude_unset=True, mode='json')

    @staticmethod
    def from_dict(obj) -> 'Model':
        return Model.model_validate(obj, from_attributes=False)
