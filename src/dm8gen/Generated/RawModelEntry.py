"""
DataM8
Copyright (C) 2024-2025 ORAYLIS GmbH

This file is part of DataM8.

DataM8 is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

DataM8 is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program. If not, see <https://www.gnu.org/licenses/>.
"""

# generated by datamodel-codegen:
#   filename:  RawModelEntry.json

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, ConfigDict, Field


class Type(Enum):
    RAW = 'raw'


class Parameter(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)
    name: str
    value: str
    custom: Optional[Dict[str, Any]] = None

    def to_dict(self) -> dict:
        return self.model_dump(by_alias=True, exclude_unset=True, mode='json')

    @staticmethod
    def from_dict(obj) -> 'Parameter':
        return Parameter.model_validate(obj, from_attributes=False)


class Attribute(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)
    name: str
    type: str
    charLength: Optional[int] = None
    charSet: Optional[str] = None
    precision: Optional[int] = None
    scale: Optional[int] = None
    nullable: Optional[bool] = None
    unitName: Optional[str] = None
    unitType: Optional[str] = None
    tags: Optional[List[str]] = None
    dateModified: Optional[str] = None
    dateDeleted: Optional[str] = None
    dateAdded: Optional[str] = None

    def to_dict(self) -> dict:
        return self.model_dump(by_alias=True, exclude_unset=True, mode='json')

    @staticmethod
    def from_dict(obj) -> 'Attribute':
        return Attribute.model_validate(obj, from_attributes=False)


class RawFunction(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)
    dataSource: Optional[str] = None
    sourceLocation: Optional[str] = None

    def to_dict(self) -> dict:
        return self.model_dump(by_alias=True, exclude_unset=True, mode='json')

    @staticmethod
    def from_dict(obj) -> 'RawFunction':
        return RawFunction.model_validate(obj, from_attributes=False)


class RawEntity(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)
    dataModule: str
    dataProduct: str
    name: str
    displayName: str
    purpose: Optional[str] = None
    explanation: Optional[str] = None
    parameters: Optional[List[Parameter]] = None
    tags: Optional[List[str]] = None
    attribute: Optional[List[Attribute]] = None

    def to_dict(self) -> dict:
        return self.model_dump(by_alias=True, exclude_unset=True, mode='json')

    @staticmethod
    def from_dict(obj) -> 'RawEntity':
        return RawEntity.model_validate(obj, from_attributes=False)


class Model(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)
    field_schema: Optional[str] = Field(None, alias='$schema')
    type: Type
    entity: Optional[RawEntity] = None
    function: Optional[RawFunction] = None

    def to_dict(self) -> dict:
        return self.model_dump(by_alias=True, exclude_unset=True, mode='json')

    @staticmethod
    def from_dict(obj) -> 'Model':
        return Model.model_validate(obj, from_attributes=False)
