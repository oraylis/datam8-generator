"""
DataM8
Copyright (C) 2024-2025 ORAYLIS GmbH

This file is part of DataM8.

DataM8 is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

DataM8 is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program. If not, see <https://www.gnu.org/licenses/>.
"""

# generated by datamodel-codegen:
#   filename:  DataSourceTypes.json

from __future__ import annotations

from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, ConfigDict, Field


class Type(Enum):
    DATA_SOURCE_TYPE = 'dataSourceType'


class ConnectionProperty(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)
    name: str
    required: bool
    description: Optional[str] = None

    def to_dict(self) -> dict:
        return self.model_dump(by_alias=True, exclude_unset=True, mode='json')

    @staticmethod
    def from_dict(obj) -> 'ConnectionProperty':
        return ConnectionProperty.model_validate(obj, from_attributes=False)


class DataTypeMapping(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)
    sourceType: str = Field(..., description='Source system data type')
    targetType: str = Field(..., description='Target system data type')

    def to_dict(self) -> dict:
        return self.model_dump(by_alias=True, exclude_unset=True, mode='json')

    @staticmethod
    def from_dict(obj) -> 'DataTypeMapping':
        return DataTypeMapping.model_validate(obj, from_attributes=False)


class DataSourceType(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)
    name: str = Field(
        ...,
        description='Name of the data source type (e.g., SqlDataSource, LakeSource)',
    )
    displayName: str = Field(..., description='Human-readable display name')
    description: str = Field(..., description='Description of the data source type')
    dataTypeMapping: Optional[List[DataTypeMapping]] = Field(
        None, description='Default data type mappings for this source type'
    )
    connectionProperties: Optional[List[ConnectionProperty]] = Field(
        None, description='Required connection properties for this source type'
    )

    def to_dict(self) -> dict:
        return self.model_dump(by_alias=True, exclude_unset=True, mode='json')

    @staticmethod
    def from_dict(obj) -> 'DataSourceType':
        return DataSourceType.model_validate(obj, from_attributes=False)


class Model(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)
    field_schema: Optional[str] = Field(None, alias='$schema')
    type: Type
    dataSourceTypes: List[DataSourceType]

    def to_dict(self) -> dict:
        return self.model_dump(by_alias=True, exclude_unset=True, mode='json')

    @staticmethod
    def from_dict(obj) -> 'Model':
        return Model.model_validate(obj, from_attributes=False)
