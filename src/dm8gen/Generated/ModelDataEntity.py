"""
DataM8
Copyright (C) 2024-2025 ORAYLIS GmbH

This file is part of DataM8.

DataM8 is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

DataM8 is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program. If not, see <https://www.gnu.org/licenses/>.
"""

# generated by datamodel-codegen:
#   filename:  ModelDataEntity.json

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, ConfigDict, Field, RootModel


class Type(Enum):
    ENTITY = 'entity'


class Parameter(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)
    name: str
    value: str
    custom: Optional[Dict[str, Any]] = None

    def to_dict(self) -> dict:
        return self.model_dump(by_alias=True, exclude_unset=True, mode='json')

    @staticmethod
    def from_dict(obj) -> 'Parameter':
        return Parameter.model_validate(obj, from_attributes=False)


class History(Enum):
    SCD0 = 'SCD0'
    SCD1 = 'SCD1'
    SCD2 = 'SCD2'
    BK = 'BK'
    SK = 'SK'
    SCD1_TIMESTAMP = 'SCD1_TIMESTAMP'


class Attribute(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)
    name: str
    displayName: Optional[str] = None
    description: Optional[str] = None
    attributeType: Optional[str] = None
    dataType: Optional[str] = None
    businessKeyNo: Optional[int] = None
    alternateKeyGroup: Optional[str] = None
    alternateKeyNo: Optional[int] = None
    charLength: Optional[int] = None
    charSet: Optional[str] = None
    precision: Optional[int] = None
    scale: Optional[int] = None
    nullable: Optional[bool] = None
    unitAttribute: Optional[str] = None
    parameter: Optional[List[Parameter]] = None
    tags: Optional[List[str]] = None
    refactorNames: Optional[List[str]] = None
    history: Optional[History] = History.SCD1
    dateModified: Optional[str] = None
    dateDeleted: Optional[str] = None

    def to_dict(self) -> dict:
        return self.model_dump(by_alias=True, exclude_unset=True, mode='json')

    @staticmethod
    def from_dict(obj) -> 'Attribute':
        return Attribute.model_validate(obj, from_attributes=False)


class RelationshipField(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)
    dm8lAttr: str
    dm8lKeyAttr: str

    def to_dict(self) -> dict:
        return self.model_dump(by_alias=True, exclude_unset=True, mode='json')

    @staticmethod
    def from_dict(obj) -> 'RelationshipField':
        return RelationshipField.model_validate(obj, from_attributes=False)


class Relationship(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)
    dm8lKey: str
    role: str
    fields: Optional[List[RelationshipField]] = None

    def to_dict(self) -> dict:
        return self.model_dump(by_alias=True, exclude_unset=True, mode='json')

    @staticmethod
    def from_dict(obj) -> 'Relationship':
        return Relationship.model_validate(obj, from_attributes=False)


class DataEntity(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)
    dataModule: Optional[str] = Field(
        None,
        description='DEPRECATED: Will be derived from file path in v2. Kept for transition compatibility.',
    )
    dataProduct: Optional[str] = Field(
        None,
        description='DEPRECATED: Will be derived from file path in v2. Kept for transition compatibility.',
    )
    name: str
    extensionOf: Optional[str] = None
    displayName: str
    description: Optional[str] = None
    parameters: Optional[List[Parameter]] = None
    tags: Optional[List[str]] = None
    attribute: Optional[List[Attribute]] = None
    relationship: Optional[List[Relationship]] = None
    refactorNames: Optional[List[str]] = None

    def to_dict(self) -> dict:
        return self.model_dump(by_alias=True, exclude_unset=True, mode='json')

    @staticmethod
    def from_dict(obj) -> 'DataEntity':
        return DataEntity.model_validate(obj, from_attributes=False)


class Mode(Enum):
    SCHEDULE = 'schedule'
    MODULE = 'module'
    EVENT = 'event'
    CHILDREN = 'children'


class TriggerFunction(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)
    mode: Optional[Mode] = None

    def to_dict(self) -> dict:
        return self.model_dump(by_alias=True, exclude_unset=True, mode='json')

    @staticmethod
    def from_dict(obj) -> 'TriggerFunction':
        return TriggerFunction.model_validate(obj, from_attributes=False)


class Mode1(Enum):
    FULL = 'full'
    INCREMENTAL = 'incremental'
    PERIOD = 'period'


class LoadFunction(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)
    mode: Optional[Mode1] = None

    def to_dict(self) -> dict:
        return self.model_dump(by_alias=True, exclude_unset=True, mode='json')

    @staticmethod
    def from_dict(obj) -> 'LoadFunction':
        return LoadFunction.model_validate(obj, from_attributes=False)


class Mode2(Enum):
    HISTORY = 'history'
    OVERWRITE = 'overwrite'
    SNAPSHOT = 'snapshot'


class StoreFunction(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)
    mode: Optional[Mode2] = None

    def to_dict(self) -> dict:
        return self.model_dump(by_alias=True, exclude_unset=True, mode='json')

    @staticmethod
    def from_dict(obj) -> 'StoreFunction':
        return StoreFunction.model_validate(obj, from_attributes=False)


class Type9(Enum):
    SOURCE = 'source'


class Type10(Enum):
    MODEL = 'model'


class AttributeMapping(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)
    name: Optional[str] = None
    sourceComputation: Optional[str] = None
    sourceName: str

    def to_dict(self) -> dict:
        return self.model_dump(by_alias=True, exclude_unset=True, mode='json')

    @staticmethod
    def from_dict(obj) -> 'AttributeMapping':
        return AttributeMapping.model_validate(obj, from_attributes=False)


class Kind(Enum):
    CUSTOM = 'custom'


class CustomTransformation(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)
    stepNo: int
    kind: Kind
    name: str

    def to_dict(self) -> dict:
        return self.model_dump(by_alias=True, exclude_unset=True, mode='json')

    @staticmethod
    def from_dict(obj) -> 'CustomTransformation':
        return CustomTransformation.model_validate(obj, from_attributes=False)


class Kind1(Enum):
    BUILTIN = 'builtin'


class BuiltInTransformation(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)
    stepNo: int
    kind: Kind1
    name: str

    def to_dict(self) -> dict:
        return self.model_dump(by_alias=True, exclude_unset=True, mode='json')

    @staticmethod
    def from_dict(obj) -> 'BuiltInTransformation':
        return BuiltInTransformation.model_validate(obj, from_attributes=False)


class SystemSource(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)
    type: Type9
    dataSource: str
    sourceLocation: str
    filter: Optional[str] = None
    mapping: Optional[List[AttributeMapping]] = None

    def to_dict(self) -> dict:
        return self.model_dump(by_alias=True, exclude_unset=True, mode='json')

    @staticmethod
    def from_dict(obj) -> 'SystemSource':
        return SystemSource.model_validate(obj, from_attributes=False)


class ModelSource(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)
    type: Type10
    dm8l: str
    filter: Optional[str] = None
    mapping: Optional[List[AttributeMapping]] = None

    def to_dict(self) -> dict:
        return self.model_dump(by_alias=True, exclude_unset=True, mode='json')

    @staticmethod
    def from_dict(obj) -> 'ModelSource':
        return ModelSource.model_validate(obj, from_attributes=False)


class EntityFunctions(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)
    trigger: Optional[TriggerFunction] = None
    load: Optional[LoadFunction] = None
    store: Optional[StoreFunction] = None
    sources: Optional[List[Union[SystemSource, ModelSource]]] = None
    transformations: Optional[
        List[Union[CustomTransformation, BuiltInTransformation]]
    ] = None

    def to_dict(self) -> dict:
        return self.model_dump(by_alias=True, exclude_unset=True, mode='json')

    @staticmethod
    def from_dict(obj) -> 'EntityFunctions':
        return EntityFunctions.model_validate(obj, from_attributes=False)


class Model(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)
    field_schema: Optional[str] = Field(None, alias='$schema')
    type: Type
    entity: DataEntity
    functions: Optional[EntityFunctions] = None

    def to_dict(self) -> dict:
        return self.model_dump(by_alias=True, exclude_unset=True, mode='json')

    @staticmethod
    def from_dict(obj) -> 'Model':
        return Model.model_validate(obj, from_attributes=False)
