# generated by datamodel-codegen:
#   filename:  StageModelEntry.json

from __future__ import annotations

from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, ConfigDict, Field


class Type(Enum):
    STAGE = 'stage'


class Parameter(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)
    name: str
    value: str

    def to_dict(self) -> dict:
        return self.model_dump(by_alias=True, exclude_unset=True, mode='json')

    @staticmethod
    def from_dict(obj) -> 'Parameter':
        return Parameter.model_validate(obj, from_attributes=False)


class Attribute(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)
    name: str
    type: str
    charLength: Optional[int] = None
    charSet: Optional[str] = None
    precision: Optional[int] = None
    scale: Optional[int] = None
    nullable: Optional[bool] = None
    unitName: Optional[str] = None
    unitType: Optional[str] = None
    tags: Optional[List[str]] = None

    def to_dict(self) -> dict:
        return self.model_dump(by_alias=True, exclude_unset=True, mode='json')

    @staticmethod
    def from_dict(obj) -> 'Attribute':
        return Attribute.model_validate(obj, from_attributes=False)


class AttributesMapping(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)
    source: str
    target: str

    def to_dict(self) -> dict:
        return self.model_dump(by_alias=True, exclude_unset=True, mode='json')

    @staticmethod
    def from_dict(obj) -> 'AttributesMapping':
        return AttributesMapping.model_validate(obj, from_attributes=False)


class StageEntity(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)
    dataModule: str
    dataProduct: str
    name: str
    displayName: str
    purpose: Optional[str] = None
    explanation: Optional[str] = None
    parameters: Optional[List[Parameter]] = None
    tags: Optional[List[str]] = None
    attribute: Optional[List[Attribute]] = None

    def to_dict(self) -> dict:
        return self.model_dump(by_alias=True, exclude_unset=True, mode='json')

    @staticmethod
    def from_dict(obj) -> 'StageEntity':
        return StageEntity.model_validate(obj, from_attributes=False)


class StageFunction(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)
    dataSource: Optional[str] = None
    sourceLocation: Optional[str] = None
    attributeMapping: Optional[List[AttributesMapping]] = None

    def to_dict(self) -> dict:
        return self.model_dump(by_alias=True, exclude_unset=True, mode='json')

    @staticmethod
    def from_dict(obj) -> 'StageFunction':
        return StageFunction.model_validate(obj, from_attributes=False)


class Model(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)
    field_schema: Optional[str] = Field(None, alias='$schema')
    type: Type
    entity: Optional[StageEntity] = None
    function: Optional[StageFunction] = None

    def to_dict(self) -> dict:
        return self.model_dump(by_alias=True, exclude_unset=True, mode='json')

    @staticmethod
    def from_dict(obj) -> 'Model':
        return Model.model_validate(obj, from_attributes=False)
