# generated by datamodel-codegen:
#   filename:  Index.json

from __future__ import annotations

from typing import List, Optional

from pydantic import BaseModel, ConfigDict


class IndexEntry(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)
    locator: str
    name: str
    absPath: str
    references: Optional[List[str]] = None

    def to_dict(self) -> dict:
        return self.model_dump(by_alias=True, exclude_unset=True, mode='json')

    @staticmethod
    def from_dict(obj) -> 'IndexEntry':
        return IndexEntry.model_validate(obj, from_attributes=False)


class RawIndex(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)
    entry: Optional[List[IndexEntry]] = None

    def to_dict(self) -> dict:
        return self.model_dump(by_alias=True, exclude_unset=True, mode='json')

    @staticmethod
    def from_dict(obj) -> 'RawIndex':
        return RawIndex.model_validate(obj, from_attributes=False)


class StageIndex(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)
    entry: Optional[List[IndexEntry]] = None

    def to_dict(self) -> dict:
        return self.model_dump(by_alias=True, exclude_unset=True, mode='json')

    @staticmethod
    def from_dict(obj) -> 'StageIndex':
        return StageIndex.model_validate(obj, from_attributes=False)


class CoreIndex(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)
    entry: Optional[List[IndexEntry]] = None

    def to_dict(self) -> dict:
        return self.model_dump(by_alias=True, exclude_unset=True, mode='json')

    @staticmethod
    def from_dict(obj) -> 'CoreIndex':
        return CoreIndex.model_validate(obj, from_attributes=False)


class CuratedIndex(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)
    entry: Optional[List[IndexEntry]] = None

    def to_dict(self) -> dict:
        return self.model_dump(by_alias=True, exclude_unset=True, mode='json')

    @staticmethod
    def from_dict(obj) -> 'CuratedIndex':
        return CuratedIndex.model_validate(obj, from_attributes=False)


class Model(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)
    rawIndex: Optional[RawIndex] = None
    stageIndex: Optional[StageIndex] = None
    coreIndex: Optional[CoreIndex] = None
    curatedIndex: Optional[CuratedIndex] = None

    def to_dict(self) -> dict:
        return self.model_dump(by_alias=True, exclude_unset=True, mode='json')

    @staticmethod
    def from_dict(obj) -> 'Model':
        return Model.model_validate(obj, from_attributes=False)
