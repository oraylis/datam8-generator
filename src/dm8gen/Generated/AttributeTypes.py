# generated by datamodel-codegen:
#   filename:  AttributeTypes.json

from __future__ import annotations

from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, ConfigDict, Field


class Type(Enum):
    ATTRIBUTE_TYPE = 'attributeType'


class HasUnit(Enum):
    NO_UNIT = 'NoUnit'
    PHYSICAL = 'Physical'
    CURRENCY = 'Currency'
    UNIT_FREE = 'UnitFree'


class IsUnit(Enum):
    NO_UNIT = 'NoUnit'
    PHYSICAL = 'Physical'
    CURRENCY = 'Currency'


class AttributeType(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)
    name: str
    displayName: str
    purpose: Optional[str] = None
    explanation: Optional[str] = None
    defaultType: str
    defaultLength: Optional[int] = None
    defaultPrecision: Optional[int] = None
    defaultScale: Optional[int] = None
    hasUnit: Optional[HasUnit] = None
    isUnit: Optional[IsUnit] = None
    canBeInRelation: Optional[bool] = 'False'
    isDefaultProperty: Optional[bool] = 'False'

    def to_dict(self) -> dict:
        return self.model_dump(by_alias=True, exclude_unset=True, mode='json')

    @staticmethod
    def from_dict(obj) -> 'AttributeType':
        return AttributeType.model_validate(obj, from_attributes=False)


class Model(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)
    field_schema: Optional[str] = Field(None, alias='$schema')
    type: Optional[Type] = None
    items: Optional[List[AttributeType]] = None

    def to_dict(self) -> dict:
        return self.model_dump(by_alias=True, exclude_unset=True, mode='json')

    @staticmethod
    def from_dict(obj) -> 'Model':
        return Model.model_validate(obj, from_attributes=False)
