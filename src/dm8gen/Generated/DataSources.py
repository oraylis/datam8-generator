# generated by datamodel-codegen:
#   filename:  DataSources.json

from __future__ import annotations

from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, ConfigDict, Field


class Type(Enum):
    DATA_SOURCE = 'dataSource'


class DataTypeMappingItem(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)
    sourceType: Optional[str] = None
    targetType: Optional[str] = None

    def to_dict(self) -> dict:
        return self.model_dump(by_alias=True, exclude_unset=True, mode='json')

    @staticmethod
    def from_dict(obj) -> 'DataTypeMappingItem':
        return DataTypeMappingItem.model_validate(obj, from_attributes=False)


class DataSource(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)
    name: Optional[str] = None
    displayName: Optional[str] = None
    purpose: Optional[str] = None
    type: Optional[str] = None
    connectionString: Optional[str] = None
    dataTypeMapping: Optional[List[DataTypeMappingItem]] = None

    def to_dict(self) -> dict:
        return self.model_dump(by_alias=True, exclude_unset=True, mode='json')

    @staticmethod
    def from_dict(obj) -> 'DataSource':
        return DataSource.model_validate(obj, from_attributes=False)


class Model(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)
    field_schema: Optional[str] = Field(None, alias='$schema')
    type: Optional[Type] = None
    items: Optional[List[DataSource]] = None

    def to_dict(self) -> dict:
        return self.model_dump(by_alias=True, exclude_unset=True, mode='json')

    @staticmethod
    def from_dict(obj) -> 'Model':
        return Model.model_validate(obj, from_attributes=False)
